config {
  type: 'view',
  schema: 'users',
  tags: ['reporting', 'weekly cohort']
}

-- Demonstration on how Cohort Analysis is done. In order to do this we just need 2 tables:
-- users (id, timestamp)
-- activities (user_id, timestamp)

-- The below example use the following table names and fields, feel free to replace them with yours.
-- - users (id, created_at)
-- - activities (user_id, created_at)

--Demo: https://demo.holistics.io/queries/11118-buyer-cohort-retention-analysis

-- MONTH_DIFF is a custom Postgres function that calculate the number difference between 2 months.

-- (user_id, cohort_month), each 
with cohort_items as (
  select
    user_id,
    min(date_trunc('week', U.timestamp)::date) as cohort_week
  from ${ref('segment_user_events')} as U
  group by 1
  order by 1, 2
)
-- (user_id, week_number): user X has activity in week number X
, user_activities as (
  select
    A.user_id,
    C.cohort_week,
    A.timestamp,
    datediff(week,
      C.cohort_week,
      date_trunc(week, A.timestamp)::date
    ) as week_number
  from cohort_items as C 
  left join ${ref('segment_user_events')} A ON A.user_id = C.user_id
  group by 1,2,3,4
),
-- (cohort_week, size)
cohort_size as (
  select cohort_week, count(1) as num_users
  from cohort_items
  group by 1
  order by 1
),
-- (cohort_month, month_number, cnt)
B as (
  select
    C.cohort_week,
    A.week_number,
    count(1) as num_users
  from user_activities A
  left join cohort_items C ON A.user_id = C.user_id
  group by 1,2
)
-- our final value: (cohort_month, size, month_number, percentage)
select
  B.cohort_week,
  S.num_users as total_users,
  B.week_number,
  B.num_users::float / S.num_users as percentage
from B
left join cohort_size S ON B.cohort_week = S.cohort_week
where B.cohort_week IS NOT NULL
order by 1, 3